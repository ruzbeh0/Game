// Decompiled with JetBrains decompiler
// Type: Game.Prefabs.EconomyPrefab
// Assembly: Game, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null
// MVID: 6E65E546-90EB-41EE-A5F5-E22CC56BB1AC
// Assembly location: C:\Program Files (x86)\Steam\steamapps\common\Cities Skylines II\Cities2_Data\Managed\Game.dll

using Colossal.Collections;
using System.Collections.Generic;
using Unity.Entities;
using Unity.Mathematics;
using UnityEngine;

#nullable disable
namespace Game.Prefabs
{
  [ComponentMenu("Settings/", new System.Type[] {})]
  public class EconomyPrefab : PrefabBase
  {
    [Tooltip("Export price multiplier for resources generated by an extractor company and sold to OC.")]
    public float m_ExtractorCompanyExportMultiplier = 0.85f;
    [Tooltip("Job level: Simple.\nMinimum education level: Uneducated.\n\nNote: All citizens can work in jobs that are lower than their highest education level.")]
    public int m_Wage0;
    [Tooltip("Job level: Basic.\nMinimum education level: Poorly educated.\n\nNote: All citizens can work in jobs that are lower than their highest education level.")]
    public int m_Wage1;
    [Tooltip("Job level: Senior.\nMinimum education level: Educated.\n\nNote: All citizens can work in jobs that are lower than their highest education level.")]
    public int m_Wage2;
    [Tooltip("Job level: Specialist.\nMinimum education level: Well educated.\n\nNote: All citizens can work in jobs that are lower than their highest education level.")]
    public int m_Wage3;
    [Tooltip("Job level: Manager.\nMinimum education level: Highly educated.\n\nNote: All citizens can work in jobs that are lower than their highest education level.")]
    public int m_Wage4;
    [Tooltip("A multiplier value to calculate wages for commuters from OC.\n\nExample: Commuter working on a Basic level job position earns (Wage 1 x CommuterWageMultiplier)")]
    public float m_CommuterWageMultiplier;
    [Tooltip("The city service workers' wage multiplier value.\n\nNote: City service jobs are divided into education levels the same way as other workplaces and pay the same wages as zoned companies' jobs. The wage multiplier adjusts all of the wages.")]
    public float m_CityServiceWageAdjustment = 0.5f;
    [Tooltip("All company resources added together and compared to the value. If the combined resources value is lower than the limit value, the company goes bankrupt.\n\nResources include:\n- Money resource\n- Input (resources the company buys to manufacture other resources)\n- Output resources (resources made by the company and stored in the company’s building)\n- Resources that are being moved around by vehicles (not yet arrived to other companies or OC)\n- Service resources (Entertainment, Lodging, other immaterial resources)")]
    public int m_CompanyBankruptcyLimit = -5000000;
    [Tooltip("A balancing value deducted from earned wage before taxes are deducted.\n\nExample: (Wage 1 - ResidentialMinimumEarnings) * tax rate = Household tax income")]
    public int m_ResidentialMinimumEarnings;
    [Tooltip("Money paid by the government for citizens who are of working age (teens and adults) but are not working. This allows them to pay Rent and buy resources.")]
    public int m_UnemploymentBenefit;
    [Tooltip("Money paid by the government for senior citizens who don't work anymore. This allows them to pay Rent and buy resources.")]
    public int m_Pension;
    [Tooltip("Money paid by the government for households per child. This offsets children's resource consumption.")]
    public int m_FamilyAllowance;
    [Tooltip("A multiplier value to control how much households consume the resources they have bought and are storing in their household.\n\nX value refers to the poorest households\nY value refers to the wealthiest households.\n\nNote: All resources bought are transformed into a separate monetary resource equal to the value of the resources bought/money spent on the resource acquisition. This “resource money” is separate from the household’s spending money and will be deducted as the household consumes the “resources” aka the resource money.")]
    public float2 m_ResourceConsumptionMultiplier = new float2(0.3f, 10f);
    [Tooltip("A resource consumption multiplier value. The value defines the overall daily resource consumption of all citizens in the city.")]
    public float m_ResourceConsumptionPerCitizen = 3.5f;
    [Tooltip("A resource consumption multiplier value for tourists. The value defines the overall daily resource consumption of all tourists in the city.\n\nNote: Tourists consume resources much in the same way as regular citizens while they are visiting the city.")]
    public float m_TouristConsumptionMultiplier;
    [Tooltip("The schedule when a citizen goes to work.\n\nNote: The 24h day is placed between the values 0 and 1, where 0 means 00.00 (aka start of the day) and 1 means 24:00 (aka the end of the day).\n\nExample: Workday start (0.35) therefore means approximately 7:00 o’clock.")]
    public float m_WorkDayStart;
    [Tooltip("The schedule when a citizen goes back home from work.\n\nNote: The 24h day is placed between the values 0 and 1, where 0 means 00.00 (aka start of the day) and 1 means 24:00 (aka the end of the day).\n\nExample: Workday start (0.35) therefore means approximately 7:00 o’clock.")]
    public float m_WorkDayEnd;
    [Tooltip("Global industrial Efficiency balancing value.\n\nEfficiency affects industrial production rate.")]
    public float m_IndustrialEfficiency;
    [Tooltip("Global commercial Efficiency balancing value.\n\nEfficiency affects commercial service rate.")]
    public float m_CommercialEfficiency;
    [Tooltip("Global specialized industry Efficiency balancing value.\n\nEfficiency affects the extractors’ production rate.")]
    public float m_ExtractorEfficiency;
    [Tooltip("Global value to control how much traffic moves in the city.\n\nNote: Higher value means more vehicles.Lower value means less vehicles and citizens doing their shopping “online”, so that the resources they buy are teleported to their households without them visiting the shops.")]
    public float m_TrafficReduction = 0.0004f;
    [Tooltip("The maximum value the City Specialization Bonus can reach in the building’s Efficiency calculation.\n\nCity Specialization Bonus affects the zoned buildings’ Efficiency.")]
    public float m_MaxCitySpecializationBonus = 0.15f;
    [Tooltip("City Specialization Bonus resource production coefficient that related to how many production can tend to max bonus [prod/(prod+coefficient) * max]")]
    public int m_ResourceProductionCoefficient = 10000000;
    [Tooltip("The percentage value of how much a commercial company contributes to the Rent payments of a mixed housing building.")]
    public float m_MixedBuildingCompanyRentPercentage = 0.3f;
    [Tooltip("Multiplier to the Land Value’s effect on different zones’ Rent. The Land Value value within the building’s lot is multiplied by the appropriate modifier.\n\nX: Residential Land Value modifier\nY: Commercial Land Value modifier\nZ: Industrial / Office Land Value modifier")]
    public float3 m_LandValueModifier = new float3(0.5f, 0.7f, 0.3f);
    [Tooltip("ZoneType value in the Rent calculation formula.\n\nRent formula: (LandValue + (ZoneType * Building Level)) * LotSize * SpaceMultiplier\n\nX: Residential ZoneType\nY: Commercial ZoneType\nZ: Industrial/Office ZoneType")]
    public float3 m_RentPriceBuildingZoneTypeBase = new float3(1f, 2f, 0.8f);
    [Tooltip("Controls the Rent curve per building level.\n\nResidential Building's final upkeep is calculated by upkeep multiply with the building level's exponent, higher level has higher upkeep")]
    public float m_ResidentialUpkeepLevelExponent = 1.3f;
    [Tooltip("Controls the Rent curve per building level.\n\nCommercial Building's final upkeep is calculated by upkeep multiply with the building level's exponent, higher level has higher upkeep")]
    public float m_CommercialUpkeepLevelExponent = 2.1f;
    [Tooltip("Controls the Rent curve per building level.\n\nIndustrial Building's final upkeep is calculated by upkeep multiply with the building level's exponent, higher level has higher upkeep")]
    public float m_IndustrialUpkeepLevelExponent = 2f;
    [Tooltip("A balancing value for Office zone demand based on Industrial zone production of resource units.\n\nWhen the Office zone is unlocked, industrial production starts to affect the Office demand so that a set amount of industrial resources being produced “require” a set amount of Office resources such as Software, Banking etc.\n\nExample: The value of 2000 means that 2000 units of industrial resources produced affects the demand for offices by “requiring” 1 unit of office resources being produced.")]
    public int m_PerOfficeResourceNeededForIndustrial = 2000;
    [Tooltip("The number of days a citizen can receive unemployment benefit.\n\nOnce they stop receiving the benefit and haven’t found a new job, they either move out of the city or become homeless.")]
    public float m_UnemploymentAllowanceMaxDays = 5f;
    [Tooltip("A balancing value used to divide all of the household’s resources to determine the probability of the household’s next shopping action.\n\nNote: The lower the value after the division, the higher the chance that the household will perform a shopping action.")]
    public int m_ShopPossibilityIncreaseDivider = 1000;
    [Tooltip("The money the player receives at the start of a new city.")]
    public int m_PlayerStartMoney = 800000;
    [Tooltip("The building refund percentage of the build cost,x,y,z match the timer range's x,y,z")]
    public float3 m_BuildRefundPercentage = new float3(0.75f, 0.5f, 0.25f);
    [Tooltip("The building refund time range,x,y,z match the refund percentage's x,y,z, unit is game day, 0.5 means half a game day, 1 means 1 game day")]
    public float3 m_BuildRefundTimeRange = new float3(0.04f, 0.5f, 1f);
    [Tooltip("The road refund percentage of the build cost,x,y,z match the timer range's x,y,z")]
    public float3 m_RoadRefundPercentage = new float3(1f, 0.75f, 0.5f);
    [Tooltip("The road refund time range,x,y,z match the refund percentage's x,y,z, unit is game day, 0.5 means half a game day, 1 means 1 game day")]
    public float3 m_RoadRefundTimeRange = new float3(0.04f, 0.5f, 1f);
    [Tooltip("Age multiplier for the sapling construction cost defined in the tree prefabs (x: Young, y: Mature, z: Elderly)")]
    public int3 m_TreeCostMultipliers = new int3(2, 5, 10);
    [Tooltip("The map tile's upkeep multiplier which based on the map tile's cost.")]
    public AnimationCurve m_MapTileUpkeepCostMultiplier;

    public override void GetPrefabComponents(HashSet<ComponentType> components)
    {
      base.GetPrefabComponents(components);
      components.Add(ComponentType.ReadWrite<EconomyParameterData>());
    }

    public override void GetArchetypeComponents(HashSet<ComponentType> components)
    {
      base.GetArchetypeComponents(components);
    }

    public override void LateInitialize(EntityManager entityManager, Entity entity)
    {
      base.LateInitialize(entityManager, entity);
      entityManager.SetComponentData<EconomyParameterData>(entity, new EconomyParameterData()
      {
        m_ExtractorCompanyExportMultiplier = this.m_ExtractorCompanyExportMultiplier,
        m_Wage0 = this.m_Wage0,
        m_Wage1 = this.m_Wage1,
        m_Wage2 = this.m_Wage2,
        m_Wage3 = this.m_Wage3,
        m_Wage4 = this.m_Wage4,
        m_CommuterWageMultiplier = this.m_CommuterWageMultiplier,
        m_CompanyBankruptcyLimit = this.m_CompanyBankruptcyLimit,
        m_ResidentialMinimumEarnings = this.m_ResidentialMinimumEarnings,
        m_UnemploymentBenefit = this.m_UnemploymentBenefit,
        m_Pension = this.m_Pension,
        m_FamilyAllowance = this.m_FamilyAllowance,
        m_ResourceConsumptionMultiplier = this.m_ResourceConsumptionMultiplier,
        m_ResourceConsumptionPerCitizen = this.m_ResourceConsumptionPerCitizen,
        m_TouristConsumptionMultiplier = this.m_TouristConsumptionMultiplier,
        m_WorkDayStart = this.m_WorkDayStart,
        m_WorkDayEnd = this.m_WorkDayEnd,
        m_CommercialEfficiency = this.m_CommercialEfficiency,
        m_IndustrialEfficiency = this.m_IndustrialEfficiency,
        m_ExtractorProductionEfficiency = this.m_ExtractorEfficiency,
        m_TrafficReduction = this.m_TrafficReduction,
        m_MaxCitySpecializationBonus = this.m_MaxCitySpecializationBonus,
        m_ResourceProductionCoefficient = this.m_ResourceProductionCoefficient,
        m_LandValueModifier = this.m_LandValueModifier,
        m_RentPriceBuildingZoneTypeBase = this.m_RentPriceBuildingZoneTypeBase,
        m_MixedBuildingCompanyRentPercentage = this.m_MixedBuildingCompanyRentPercentage,
        m_ResidentialUpkeepLevelExponent = this.m_ResidentialUpkeepLevelExponent,
        m_CommercialUpkeepLevelExponent = this.m_CommercialUpkeepLevelExponent,
        m_IndustrialUpkeepLevelExponent = this.m_IndustrialUpkeepLevelExponent,
        m_PerOfficeResourceNeededForIndustrial = this.m_PerOfficeResourceNeededForIndustrial,
        m_UnemploymentAllowanceMaxDays = this.m_UnemploymentAllowanceMaxDays,
        m_ShopPossibilityIncreaseDivider = this.m_ShopPossibilityIncreaseDivider,
        m_CityServiceWageAdjustment = this.m_CityServiceWageAdjustment,
        m_PlayerStartMoney = this.m_PlayerStartMoney,
        m_BuildRefundPercentage = this.m_BuildRefundPercentage,
        m_BuildRefundTimeRange = this.m_BuildRefundTimeRange,
        m_RoadRefundPercentage = this.m_RoadRefundPercentage,
        m_RoadRefundTimeRange = this.m_RoadRefundTimeRange,
        m_TreeCostMultipliers = this.m_TreeCostMultipliers,
        m_MapTileUpkeepCostMultiplier = new AnimationCurve1(this.m_MapTileUpkeepCostMultiplier)
      });
    }
  }
}
